from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

import app.keyboards as kb
import app.database.requests as rq
from app.database.requests import get_category_by_id, update_random_product_price


router = Router()


@router.message(CommandStart())
async def send_welcome(message: Message):
    await rq.set_user(message.from_user.id, message.chat.id, message.from_user.full_name)
    #chat_id = message.chat.id
    #user_id = message.from_user.id
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!' , reply_markup=kb.main)
    await message.answer(f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∫–∏–¥–æ–∫, –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–∏—Ö —Å–∫–∏–¥–∫–∞—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞—Ö.\n\n"
                         f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–∞—Ö –Ω–∞—á–∞–ª–∏ –í–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Å–∫–∏–¥–∫–∏. \n\n"
                         )
    

@router.message(Command("start_test"))
async def for_test(message: Message):
    await update_random_product_price()
    

@router.message(F.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def open_category(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', reply_markup= await kb.categories())

@router.message(F.text == '–û –Ω–∞—Å')
async def about_us(message: Message):
    await message.answer(f'–ú—ã –∫–æ–º–∞–Ω–¥–∞ 21-–ö–¢ —Å–¥–µ–ª–∞–ª–∏ –ß–∞—Ç –±–æ—Ç–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏–π —Å–∫–∏–¥–∫–∏.\n\n\n\n'
                         f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
                         f"üß¶–ù–æ—Å–∫–∏: kolosstore.ru.\n\n"
                         f"üì±–¢–µ–ª–µ—Ñ–æ–Ω—ã: nn.istoreapple.ru, mi-shop.com, svyazon.ru.\n\n"
                         f"üëï–§—É—Ç–±–æ–ª–∫–∏: zarina.ru, printbar.ru, brandshop.ru.\n\n"
                         f"üëü–û–±—É–≤—å: sneakerhead.ru, noone.ru, justitalian.ru"
                         )

@router.message(F.text == '–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def write_my_category(message: Message):
    subscriptions = await rq.get_subscriptions()
    user_subscriptions = [sub.category_name for sub in subscriptions if sub.tg_id == message.from_user.id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if user_subscriptions:
        categories = "\n".join(user_subscriptions)
        await message.answer(f"–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories}", reply_markup=kb.main)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=kb.main)



@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    category_id = int(callback.data.split('_')[1])
    
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ë–î –ø–æ id
    category = await get_category_by_id(category_id)
    print(category.name)
    if await rq.set_user_category(callback.from_user.id, category.name):
        await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category.name}"')   
        await callback.message.answer(f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "{category.name}"')
    else:
        await callback.message.answer(f'–£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ "{category.name}"', reply_markup= await kb.delete_user_category(category.name))


@router.callback_query(F.data.startswith('to_main'))
async def write_my_category(callback: CallbackQuery):
    subscriptions = await rq.get_subscriptions()
    user_subscriptions = [sub.category_name for sub in subscriptions if sub.tg_id == callback.from_user.id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if user_subscriptions:
        categories = "\n".join(user_subscriptions)
        await callback.message.answer(f"–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories}", reply_markup=kb.main)
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=kb.main)

@router.callback_query(F.data.startswith('delete_user_category_'))
async def write_my_category(callback: CallbackQuery):
    subscriptions = await rq.get_subscriptions()
    category_name = callback.data[len('delete_user_category_'):]
    subscription_to_delete = None
    for subscription in subscriptions:
        if subscription.tg_id == callback.from_user.id and subscription.category_name == category_name:
            subscription_to_delete = subscription
            break

    if subscription_to_delete:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
        await rq.delete_user_category(subscription_to_delete.tg_id, subscription_to_delete.category_name)
        await callback.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=kb.main)
    else:
        await callback.answer(f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'.", reply_markup=kb.main)
